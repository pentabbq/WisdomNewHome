<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
   
   		<!-- 扫描类包配置 -->
	<context:component-scan base-package="com.wisdom.*"/>
      <!-- 数据源配置 -->
     <!-- 数据库相关参数属性 -->
      
    <context:property-placeholder location="classpath:jdbc.properties"/>
  
   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" 
   destroy-method="close">
   		<!-- jdbc连接属性 -->
   		<property name="driverClassName" value="${jdbc_driverClassName}"/>
   		<property name="url" value="${jdbc_url}"/>
   		<property name="username" value="${jdbc_username}"/>
   		<property name="password" value="${jdbc_password}"/>
   		
   		<!-- jdbc配置初始化大小 -->
   		<property name="initialSize" value="10"/>
   		<property name="minIdle" value="10"/>
   		<property name="maxActive" value="50"/>
   		
   		<!-- 配置最大连接等待时间 -->
   		<property name="maxWait" value="60000"/>
   		<!-- 配置间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
   		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
   		
   		<!-- 配置一个在连接池中最小生存的时间，单位是毫秒 -->
   		<property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
   		
   		<!-- 配置监控统计拦截的filter -->
   		<property name="filters" value="wall,stat"/>
   </bean>
   
   
   
   	<!-- spring和mybatis完美整合 无需mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mapping映射配置文件-->
		<property name="mapperLocations" value="classpath:mapping/*.xml"/>
		
		<!-- 配置mybatis全局配置文件:mybatis-config.xml -->
		<property name="configLocation"  value="classpath:config/mybatis-config.xml"></property>
		
		 <!--扫描entity包  
		 <property name="typeAliasesPackage" value="com.wisdom.bean"/>
		  -->
	</bean>

   
   <!--DAO接口所在包名 spring会自动查找其下的类  自动扫描mapper的接口文件，mapper接口类与mapper接口文件对应就可以  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 给出需要扫描的DAO接口 -->
		<property name="basePackage" value="com.wisdom.dao"/>
		<!-- 注入sqlsessionfactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		
	</bean>

   <!-- 事务管理器配置 -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource"/>
   </bean>
   
   <!-- 配置基于注解的声明式事务 -->
   <tx:annotation-driven transaction-manager="transactionManager"/>
	



















</beans>















